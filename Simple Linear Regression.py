import tensorflow as tf
tf.enable_eager_execution()

##Data
x_data=[1,3,5,7,9]      #y=2x+3
y_data=[5,9,13,17,21]

W=tf.Variable(3.7)      #초기 랜덤값
b=tf.Variable(7.8)

learning_rate=0.01      #Gradient 값을 얼마나 반영할것인지

for i in range(2501):
    
    ##경사하강법
    with tf.GradientTape() as tape:
        
        hypothesis=W*x_data+b   #가설함수
        cost=tf.reduce_mean(tf.square(hypothesis-y_data))   #cost 구하는 공식
        
        W_grad,b_grad=tape.gradient(cost,[W,b])
        
        W.assign_sub(learning_rate*W_grad)  #W와 b를 업데이트 해줌, P.assign_sub(Q)=>P-=Q를 의미
        b.assign_sub(learning_rate*b_grad)
        
        if(i%100==0):   #i가 100의 배수일때마다 출력
            print("{:5}|{:10.5f}|{:10.4}|{:10.6f}".format(i,W.numpy(),b.numpy(),cost))
            #{:5}-->5만큼 정렬, 문자열이면 왼쪽정렬 숫자면 오른쪽정렬
            #{:>5}--> 5 크기만큼 우측정렬, 남는공간 공백으로 채움
            #{:05}-->5만큼 우측정렬, 남는공간 0으로 채움(0 자리에 다른거X)
            #{:<5}--> 5 크기만큼 좌측정렬
            #{:^5}--> 5 크기만큼 중앙정렬
            #{:x>5}, {:x<5}-->남는공간 x로 채움
            #{:10.4f}--> 10 크기만큼 우측정렬, 소숫점 아래 4자리까지 출력
            #{:10.4}---> 10 크기만큼 우측정렬, 소숫점 아래 3자리까지 출력, 뒤에 3.010인경우 3.01, 3.000인 경우 3.0만 출력
            #{:010.4f}-->10 크기만큼 우측정렬, 소숫점 아래 4째자리까지 출력, 남는공간 0으로 채움, '.'포함 10자리
            #{1:~}{2:~}{0:~}{3:~}.format(0번째, 1번째, 2번째, 3번째) 인 경우 1번째,2번째,0번째,3번째 순으로 출력됨
            #ㄴ>없으면 순서대로
            
            
'''
출력결과
    0|   2.09800|     7.534|200.009995
  100|   1.58088|     5.746|  1.846184
  200|   1.73936|     4.708|  0.713970
  300|   1.83792|     4.062|  0.276111
  400|   1.89920|      3.66|  0.106780
  500|   1.93732|     3.411|  0.041295
  600|   1.96102|     3.255|  0.015970
  700|   1.97576|     3.159|  0.006176
  800|   1.98493|     3.099|  0.002388
  900|   1.99063|     3.061|  0.000924
 1000|   1.99417|     3.038|  0.000357
 1100|   1.99637|     3.024|  0.000138
 1200|   1.99775|     3.015|  0.000053
 1300|   1.99860|     3.009|  0.000021
 1400|   1.99913|     3.006|  0.000008
 1500|   1.99946|     3.004|  0.000003
 1600|   1.99966|     3.002|  0.000001
 1700|   1.99979|     3.001|  0.000000
 1800|   1.99987|     3.001|  0.000000
 1900|   1.99992|     3.001|  0.000000
 2000|   1.99995|       3.0|  0.000000
 2100|   1.99997|       3.0|  0.000000
 2200|   1.99998|       3.0|  0.000000
 2300|   1.99999|       3.0|  0.000000
 2400|   1.99999|       3.0|  0.000000
 2500|   2.00000|       3.0|  0.000000
'''